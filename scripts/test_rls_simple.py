#!/usr/bin/env python3
"""
Teste simples de RLS no Supabase.
"""

import os
import sys
from dotenv import load_dotenv
from supabase import create_client, Client

# Carrega as vari√°veis de ambiente do arquivo .test.env
load_dotenv(dotenv_path=os.path.join(os.path.dirname(__file__), '.test.env'))

def test_public_access(supabase: Client):
    """Testa o acesso p√∫blico √† tabela de quest√µes."""
    print("üîç Testando acesso p√∫blico...")
    try:
        response = supabase.table('questions').select('*').limit(1).execute()
        if response.data:
            print("  ‚úÖ Qualquer pessoa pode ler as quest√µes (conforme esperado)")
            return True
        else:
            print("  ‚ö†Ô∏è  Nenhuma quest√£o encontrada, mas o acesso de leitura √© permitido")
            return True
    except Exception as e:
        print(f"  ‚ùå Falha ao ler quest√µes: {str(e)}")
        return False

def sign_in_user(supabase: Client, email: str, password: str):
    """Autentica um usu√°rio e retorna um cliente autenticado."""
    print(f"\nüîë Tentando autenticar: {email}")
    try:
        # Autentica o usu√°rio
        auth_response = supabase.auth.sign_in_with_password({
            "email": email,
            "password": password
        })
        
        if not hasattr(auth_response, 'session') or not auth_response.session:
            print("‚ùå Falha na autentica√ß√£o: sess√£o n√£o encontrada")
            return None
            
        access_token = auth_response.session.access_token
        user_id = auth_response.user.id
        
        print(f"  ‚úÖ Autenticado com sucesso!")
        print(f"  - User ID: {user_id}")
        
        # Cria um novo cliente com o token de acesso
        auth_client = create_client(
            os.getenv("SUPABASE_URL"),
            os.getenv("SUPABASE_ANON_KEY")
        )
        
        # Configura o token de acesso diretamente
        auth_client.postgrest.auth(access_token)
        
        return auth_client
        
    except Exception as e:
        print(f"‚ùå Erro ao autenticar usu√°rio: {str(e)}")
        return None

def test_authenticated_access(client: Client, user_type: str = "regular"):
    """Testa o acesso autenticado."""
    print(f"\nüë§ Testando acesso de usu√°rio {user_type}...")
    
    # Testa a leitura de quest√µes
    try:
        response = client.table('questions').select('*').limit(1).execute()
        if response.data:
            print(f"  ‚úÖ Usu√°rio {user_type} pode ler quest√µes")
        else:
            print(f"  ‚ö†Ô∏è  Nenhuma quest√£o encontrada para usu√°rio {user_type}")
    except Exception as e:
        print(f"  ‚ùå Falha ao ler quest√µes: {str(e)}")
    
    # Testa a atualiza√ß√£o de quest√µes (deve falhar para usu√°rios regulares)
    if user_type == "regular":
        try:
            # Tenta atualizar uma quest√£o
            questions = client.table('questions').select('id').limit(1).execute()
            if questions.data:
                question_id = questions.data[0]['id']
                update_response = client.table('questions').update({"category": "Teste"}).eq('id', question_id).execute()
                print("  ‚ùå Usu√°rio regular n√£o deveria conseguir atualizar quest√µes!")
            else:
                print("  ‚ö†Ô∏è  Nenhuma quest√£o para testar atualiza√ß√£o")
        except Exception as e:
            if "permission denied" in str(e).lower():
                print("  ‚úÖ Usu√°rio regular n√£o pode atualizar quest√µes (conforme esperado)")
            else:
                print(f"  ‚ùå Erro inesperado ao testar atualiza√ß√£o: {str(e)}")

def main():
    """Fun√ß√£o principal."""
    print("üöÄ Iniciando Testes RLS do Supabase")
    print("=" * 50)
    
    # Inicializa o cliente Supabase
    supabase = create_client(
        os.getenv("SUPABASE_URL"),
        os.getenv("SUPABASE_ANON_KEY")
    )
    
    # Testa acesso p√∫blico
    if not test_public_access(supabase):
        print("\n‚ùå Testes de acesso p√∫blico falharam. Verifique a configura√ß√£o do Supabase.")
        return
    
    # Testa acesso autenticado
    print("\nüîë Testando acesso autenticado...")
    
    # Credenciais do usu√°rio
    test_email = "simulaioab@gmail.com"
    test_password = "4815162342"
    
    # Autentica o usu√°rio
    auth_client = sign_in_user(supabase, test_email, test_password)
    
    if auth_client:
        # Testa o acesso autenticado
        test_authenticated_access(auth_client, "regular")
    
    print("\n‚úÖ Testes conclu√≠dos!")

if __name__ == "__main__":
    main()
